from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.prompt import Prompt, Confirm
from rich.text import Text
from datetime import datetime, timedelta
from typing import List, Optional

from models.movie import Movie, TwoDMovie, ThreeDMovie
from controllers.movie_controller import MovieController

def display_movie_management(console: Console, movie_controller: MovieController, is_admin: bool):
    """
    Muestra el men√∫ de gesti√≥n de pel√≠culas seg√∫n el tipo de usuario.
    """
    while True:
        console.clear()
        console.print(Panel.fit("GESTI√ìN DE PEL√çCULAS", style="bold blue"))
        
        if is_admin:
            console.print("\n1. Agregar nueva pel√≠cula")
            console.print("2. Editar pel√≠cula existente")
            console.print("3. Cambiar estado de pel√≠cula")
            console.print("4. Ver todas las pel√≠culas")
            console.print("5. Buscar pel√≠culas")
            console.print("6. Volver al men√∫ principal\n")
            
            option = Prompt.ask("Seleccione una opci√≥n", choices=["1", "2", "3", "4", "5", "6"])
            
            if option == "1":
                handle_add_movie(console, movie_controller)
            elif option == "2":
                handle_edit_movie(console, movie_controller)
            elif option == "3":
                handle_change_movie_status(console, movie_controller)
            elif option == "4":
                display_all_movies(console, movie_controller, is_admin)
            elif option == "5":
                handle_search_movies(console, movie_controller, is_admin)
            elif option == "6":
                return
        else:
            console.print("\n1. Ver cartelera")
            console.print("2. Buscar pel√≠culas")
            console.print("3. Volver al men√∫ principal\n")
            
            option = Prompt.ask("Seleccione una opci√≥n", choices=["1", "2", "3"])
            
            if option == "1":
                display_all_movies(console, movie_controller, is_admin)
            elif option == "2":
                handle_search_movies(console, movie_controller, is_admin)
            elif option == "3":
                return

def handle_add_movie(console: Console, movie_controller: MovieController):
    """
    Maneja el proceso de agregar una nueva pel√≠cula con interfaz mejorada.
    """
    console.clear()
    console.print(Panel.fit("AGREGAR NUEVA PEL√çCULA", style="bold green"))
    
    movie_data = {}
    
    # Tipo de pel√≠cula con opciones numeradas
    console.print("\n[bold]Tipo de pel√≠cula:[/bold]")
    console.print("1: 2D (Est√°ndar)")
    console.print("2: 3D (Efectos especiales)")
    movie_type = Prompt.ask("Seleccione el tipo", choices=["1", "2"])
    movie_type = "2d" if movie_type == "1" else "3d"  # Cambiado a min√∫sculas para coincidir con el controlador
    
    # T√≠tulo
    movie_data['title'] = Prompt.ask("\nT√≠tulo de la pel√≠cula")

    # A√±o de lanzamiento con validaci√≥n
    current_year = datetime.now().year
    while True:
        try:
            release_year = int(Prompt.ask(
                f"\nA√±o de lanzamiento (1900-{current_year})",
                default=str(current_year)
            ))
            if 1900 <= release_year <= current_year:
                movie_data['release_year'] = release_year
                break
            console.print(f"[red]Error: Ingrese un a√±o entre 1900 y {current_year}[/red]")
        except ValueError:
            console.print("[red]Error: Ingrese un a√±o v√°lido[/red]")

    # Director
    movie_data['director'] = Prompt.ask("\nDirector")

    # G√©nero con sugerencias
    common_genders = ["Acci√≥n", "Comedia", "Drama", "Romance", "Ciencia Ficci√≥n", 
                    "Terror", "Animaci√≥n", "Aventura", "Documental"]
    console.print("\n[dim]Sugerencias: " + ", ".join(common_genders) + "[/dim]")
    movie_data['gender'] = Prompt.ask("G√©nero")  # Cambiado a 'gender'

    # Sinopsis
    movie_data['synopsis'] = Prompt.ask("\nSinopsis (resumen de la trama)")

    # Duraci√≥n en minutos con explicaci√≥n
    while True:
        try:
            duration = int(Prompt.ask(
                "\nDuraci√≥n [bold](en minutos)[/bold]. Ejemplo: 120 para 2 horas",
                default="120"
            ))
            if duration > 0:
                movie_data['duration'] = duration
                break
            console.print("[red]Error: La duraci√≥n debe ser mayor a 0[/red]")
        except ValueError:
            console.print("[red]Error: Ingrese un n√∫mero v√°lido[/red]")

    # Clasificaci√≥n con opciones numeradas y explicaci√≥n
    console.print("\n[bold]Clasificaci√≥n por edades:[/bold]")
    console.print("1: G - Para todos los p√∫blicos")
    console.print("2: PG - Sugerencia gu√≠a parental")
    console.print("3: PG-13 - Mayores de 13 a√±os")
    console.print("4: R - Mayores de 17 a√±os con acompa√±ante")
    console.print("5: NC-17 - Solo adultos")
    rating_choice = Prompt.ask("Seleccione la clasificaci√≥n", choices=["1", "2", "3", "4", "5"])
    rating_map = {"1": "G", "2": "PG", "3": "PG-13", "4": "R", "5": "NC-17"}
    movie_data['rating'] = rating_map[rating_choice]

    # Idioma y origen
    movie_data['language'] = Prompt.ask("\nIdioma original", default="Espa√±ol")
    movie_data['origin'] = Prompt.ask("Pa√≠s de origen", default="Colombia")

    # Tipo de sala (hall) con validaci√≥n seg√∫n el tipo de pel√≠cula
    console.print("\n[bold]Tipo de sala:[/bold]")
    if movie_type == "2d":
        console.print("1: Regular (√∫nica opci√≥n para pel√≠culas 2D)")
        hall_choice = "1"  # Forzamos la selecci√≥n de "Regular" para pel√≠culas 2D
    else:
        console.print("1: Regular")
        console.print("2: Premium")
        hall_choice = Prompt.ask("Seleccione el tipo de sala", choices=["1", "2"])
    
    movie_data['hall'] = "Regular" if hall_choice == "1" else "Premium"

    # Horarios con opciones mejoradas
    movie_data['showtimes'] = []
    console.print("\n[bold underline]Horarios de presentaci√≥n:[/bold underline]")
    
    while True:
        showtime = {}
        
        # Fecha con validaci√≥n
        default_date = (datetime.now() + timedelta(days=3)).strftime("%Y-%m-%d")
        while True:
            date = Prompt.ask("\nFecha (YYYY-MM-DD)", default=default_date)
            try:
                datetime.strptime(date, "%Y-%m-%d")
                showtime['date'] = date
                break
            except ValueError:
                console.print("[red]Error: Formato inv√°lido. Use YYYY-MM-DD[/red]")
        
        # Hora con validaci√≥n
        while True:
            time = Prompt.ask("Hora (HH:MM)", default="19:00")
            try:
                datetime.strptime(time, "%H:%M")
                showtime['time'] = time
                break
            except ValueError:
                console.print("[red]Error: Formato inv√°lido. Use HH:MM[/red]")
        
        # Sesi√≥n con opciones numeradas
        console.print("\n[bold]Sesi√≥n:[/bold]")
        console.print("1: Ma√±ana")
        console.print("2: Tarde")
        console.print("3: Noche")
        session_choice = Prompt.ask("Seleccione la sesi√≥n", choices=["1", "2", "3"])
        session_map = {"1": "ma√±ana", "2": "tarde", "3": "noche"}
        showtime['session'] = session_map[session_choice]
        
        movie_data['showtimes'].append(showtime)
        
        if not Confirm.ask("\n¬øDesea agregar otro horario?", default=False):
            break
    
    # Crear la pel√≠cula
    movie = movie_controller.create_movie(movie_data, movie_type)
    
    if movie:
        console.print(f"\n[bold green]¬°Pel√≠cula '{movie.title}' agregada exitosamente![/bold green]")
    else:
        console.print("\n[bold red]Error: No se pudo agregar la pel√≠cula[/bold red]")
    
    Prompt.ask("\nPresione Enter para continuar...")

def display_all_movies(console: Console, movie_controller: MovieController, is_admin: bool):
    """
    Muestra todas las pel√≠culas en formato de tabla, incluyendo el tipo de sala (Premium o Regular)
    y los horarios de las pel√≠culas con fecha, hora y sesi√≥n.
    """
    console.clear()
    movies = movie_controller.get_all_movies()
    
    if not movies:
        console.print("[bold yellow]No hay pel√≠culas registradas[/bold yellow]")
        Prompt.ask("\nPresione Enter para continuar...")
        return
    
    table = Table(title="üé¨ CARTELERA DE PEL√çCULAS", show_header=True, header_style="bold magenta")
    table.add_column("ID", style="dim", width=4)
    table.add_column("T√≠tulo", min_width=20)
    table.add_column("G√©nero", min_width=12)
    table.add_column("Duraci√≥n", justify="right")
    table.add_column("Clasificaci√≥n", justify="center")
    table.add_column("Sala", justify="center")
    table.add_column("Tipo Sala", justify="center")  # Nueva columna para el tipo de sala
    table.add_column("Horario", justify="center")  # Nueva columna para los horarios
    table.add_column("Estado", justify="center")
    
    for movie in movies:
        status = "[green]‚úî[/green]" if movie.status == 'active' else "[red]‚úñ[/red]"
        # Iterar sobre los horarios de la pel√≠cula
        for showtime in movie.showtimes:
            formatted_showtime = f"{showtime['date']} {showtime['time']} ({showtime['session']})"  # Formatear horario
            table.add_row(
                str(movie.movie_id),
                movie.title,
                movie.gender,
                f"{movie.duration} min",
                movie.rating,
                movie.room_type,  
                movie.hall,  
                formatted_showtime,  
                status
            )
    
    console.print(table)
    
    if is_admin:
        console.print("\n[dim]Nota: ‚úî = Activa, ‚úñ = Inactiva[/dim]")
    
    Prompt.ask("\nPresione Enter para continuar...")

def handle_edit_movie(console: Console, movie_controller: MovieController):
    """
    Maneja el proceso de edici√≥n de una pel√≠cula existente.
    """
    console.clear()
    console.print(Panel.fit("EDITAR PEL√çCULA", style="bold green"))
    
    # Mostrar lista de pel√≠culas para selecci√≥n
    movies = movie_controller.get_all_movies()
    if not movies:
        console.print("[bold yellow]No hay pel√≠culas registradas para editar[/bold yellow]")
        Prompt.ask("\nPresione Enter para continuar...")
        return
    
    display_movies_compact(console, movies)
    
    # Seleccionar pel√≠cula a editar
    while True:
        try:
            movie_id = int(Prompt.ask("Ingrese el ID de la pel√≠cula a editar"))
            selected_movie = movie_controller.get_movie(movie_id)
            if selected_movie:
                break
            console.print("[bold red]Error: ID de pel√≠cula no v√°lido[/bold red]")
        except ValueError:
            console.print("[bold red]Error: Ingrese un n√∫mero v√°lido[/bold red]")
    
    console.print(f"\nEditando: [bold]{selected_movie.title}[/bold]")
    
    # Campos editables con valores actuales como defaults
    update_data = {}
    
    # T√≠tulo
    new_title = Prompt.ask("T√≠tulo", default=selected_movie.title)
    if new_title != selected_movie.title:
        update_data['title'] = new_title
    
    # G√©nero (cambiado a 'gender')
    new_gender = Prompt.ask("G√©nero", default=selected_movie.gender)
    if new_gender != selected_movie.gender:
        update_data['gender'] = new_gender
    
    # Sinopsis
    new_synopsis = Prompt.ask("Sinopsis", default=selected_movie.synopsis)
    if new_synopsis != selected_movie.synopsis:
        update_data['synopsis'] = new_synopsis
    
    # Rating
    while True:
        new_rating = Prompt.ask("Clasificaci√≥n (G, PG, PG-13, R, NC-17)", 
                                choices=["G", "PG", "PG-13", "R", "NC-17"],
                                default=selected_movie.rating)
        if Movie.validate_rating(new_rating):
            if new_rating != selected_movie.rating:
                update_data['rating'] = new_rating
            break
    
    # Tipo de sala (hall)
    console.print("\n[bold]Tipo de sala actual:[/bold] " + selected_movie.hall)
    if Confirm.ask("¬øDesea cambiar el tipo de sala?"):
        console.print("\n1: Regular")
        console.print("2: Premium")
        hall_choice = Prompt.ask("Seleccione el tipo de sala", choices=["1", "2"])
        update_data['hall'] = "Regular" if hall_choice == "1" else "Premium"
    
    # Horarios
    if Confirm.ask("\n¬øDesea modificar los horarios de presentaci√≥n?"):
        new_showtimes = []
        console.print("\n[bold]Horarios actuales:[/bold]")
        for i, showtime in enumerate(selected_movie.showtimes, 1):
            console.print(f"{i}. {showtime['date']} {showtime['time']} ({showtime['session']})")
        
        console.print("\n[bold]Nuevos horarios:[/bold]")
        while True:
            showtime = {}
            
            # Fecha
            while True:
                date = Prompt.ask("Fecha (YYYY-MM-DD)")
                try:
                    datetime.strptime(date, "%Y-%m-%d")
                    showtime['date'] = date
                    break
                except ValueError:
                    console.print("[bold red]Error: Formato de fecha inv√°lido (YYYY-MM-DD)[/bold red]")
            
            # Hora
            while True:
                time = Prompt.ask("Hora (HH:MM)", default="19:00")
                try:
                    datetime.strptime(time, "%H:%M")
                    showtime['time'] = time
                    break
                except ValueError:
                    console.print("[bold red]Error: Formato de hora inv√°lido (HH:MM)[/bold red]")
            
            # Sesi√≥n
            showtime['session'] = Prompt.ask("Sesi√≥n (ma√±ana, tarde, noche)", 
                                            choices=["ma√±ana", "tarde", "noche"])
            
            new_showtimes.append(showtime)
            
            if not Confirm.ask("¬øDesea agregar otro horario?"):
                break
        
        update_data['showtimes'] = new_showtimes
    
    # Aplicar cambios si hay actualizaciones
    if update_data:
        updated_movie = movie_controller.update_movie(selected_movie.movie_id, update_data)
        if updated_movie:
            console.print(f"\n[bold green]¬°Pel√≠cula '{updated_movie.title}' actualizada exitosamente![/bold green]")
        else:
            console.print("\n[bold red]Error: No se pudo actualizar la pel√≠cula[/bold red]")
    else:
        console.print("\n[bold yellow]No se realizaron cambios[/bold yellow]")
    
    Prompt.ask("\nPresione Enter para continuar...")

def handle_change_movie_status(console: Console, movie_controller: MovieController):
    """
    Maneja el cambio de estado (activo/inactivo) de una pel√≠cula.
    """
    console.clear()
    console.print(Panel.fit("CAMBIAR ESTADO DE PEL√çCULA", style="bold green"))
    
    # Mostrar solo pel√≠culas activas
    active_movies = [m for m in movie_controller.get_all_movies() if m.status == 'active']
    inactive_movies = [m for m in movie_controller.get_all_movies() if m.status == 'inactive']
    
    if not active_movies and not inactive_movies:
        console.print("[bold yellow]No hay pel√≠culas registradas[/bold yellow]")
        Prompt.ask("\nPresione Enter para continuar...")
        return
    
    # Mostrar pel√≠culas activas
    if active_movies:
        console.print("\n[bold]Pel√≠culas activas:[/bold]")
        display_movies_compact(console, active_movies)
    
    # Mostrar pel√≠culas inactivas
    if inactive_movies:
        console.print("\n[bold]Pel√≠culas inactivas:[/bold]")
        display_movies_compact(console, inactive_movies)
    
    # Seleccionar pel√≠cula
    while True:
        try:
            movie_id = int(Prompt.ask("\nIngrese el ID de la pel√≠cula a cambiar estado"))
            selected_movie = movie_controller.get_movie(movie_id)
            if selected_movie:
                break
            console.print("[bold red]Error: ID de pel√≠cula no v√°lido[/bold red]")
        except ValueError:
            console.print("[bold red]Error: Ingrese un n√∫mero v√°lido[/bold red]")
    
    # Determinar acci√≥n (activar/desactivar)
    new_status = 'inactive' if selected_movie.status == 'active' else 'active'
    action = "desactivar" if new_status == 'inactive' else "activar"
    
    # Confirmar acci√≥n
    if Confirm.ask(f"\n¬øEst√° seguro que desea {action} '{selected_movie.title}'?"):
        success = movie_controller.change_movie_status(selected_movie.movie_id, new_status)
        if success:
            console.print(f"\n[bold green]¬°Pel√≠cula {action}da exitosamente![/bold green]")
        else:
            console.print("\n[bold red]Error: No se pudo cambiar el estado[/bold red]")
    else:
        console.print("\n[bold yellow]Operaci√≥n cancelada[/bold yellow]")
    
    Prompt.ask("\nPresione Enter para continuar...")

def handle_search_movies(console: Console, movie_controller: MovieController, is_admin: bool):
    """
    Maneja la b√∫squeda de pel√≠culas por diferentes criterios.
    """
    console.clear()
    console.print(Panel.fit("BUSCAR PEL√çCULAS", style="bold green"))
    
    console.print("\n1. Por t√≠tulo")
    console.print("2. Por g√©nero")
    console.print("3. Por clasificaci√≥n")
    console.print("4. Por tipo de sala (2D/3D)")
    console.print("5. Volver\n")
    
    option = Prompt.ask("Seleccione un criterio de b√∫squeda", choices=["1", "2", "3", "4", "5"])
    
    if option == "5":
        return
    
    search_term = None
    movies = []
    
    if option == "1":
        search_term = Prompt.ask("Ingrese t√≠tulo o parte del t√≠tulo")
        movies = [m for m in movie_controller.get_all_movies() 
                    if search_term.lower() in m.title.lower()]
    elif option == "2":
        search_term = Prompt.ask("Ingrese g√©nero")
        movies = [m for m in movie_controller.get_all_movies() 
                    if search_term.lower() in m.gender.lower()]
    elif option == "3":
        search_term = Prompt.ask("Ingrese clasificaci√≥n (G, PG, PG-13, R, NC-17)", 
                                choices=["G", "PG", "PG-13", "R", "NC-17"])
        movies = [m for m in movie_controller.get_all_movies() 
                    if m.rating == search_term]
    elif option == "4":
        search_term = Prompt.ask("Ingrese tipo de sala (2D/3D)", choices=["2D", "3D"])
        movies = [m for m in movie_controller.get_all_movies() 
                    if m.room_type == search_term]
    
    console.clear()
    if search_term:
        console.print(Panel.fit(f"RESULTADOS DE B√öSQUEDA: {search_term.upper()}", 
                                style="bold blue"))
    
    if movies:
        if is_admin:
            display_all_movies(console, movie_controller, is_admin)
        else:
            display_movies_for_customers(console, movies)
    else:
        console.print("\n[bold yellow]No se encontraron pel√≠culas con ese criterio[/bold yellow]")
    
    Prompt.ask("\nPresione Enter para continuar...")

def display_movies_compact(console: Console, movies: List[Movie]):
    """
    Muestra una lista compacta de pel√≠culas para selecci√≥n.
    """
    table = Table(show_header=True, header_style="bold cyan")
    table.add_column("ID", style="dim", width=4)
    table.add_column("T√≠tulo", min_width=20)
    table.add_column("Tipo", justify="center")
    table.add_column("Estado", justify="center")
    
    for movie in movies:
        status = "[green]‚úî[/green]" if movie.status == 'active' else "[red]‚úñ[/red]"
        table.add_row(
            str(movie.movie_id),
            movie.title,
            movie.room_type,
            status
        )
    
    console.print(table)

def display_movies_for_customers(console: Console, movies: List[Movie]):
    """
    Muestra pel√≠culas con formato especial para clientes.
    """
    table = Table(title="üé¨ CARTELERA", show_header=True, header_style="bold magenta")
    table.add_column("T√≠tulo", min_width=20)
    table.add_column("G√©nero", min_width=12)
    table.add_column("Duraci√≥n", justify="right")
    table.add_column("Clasificaci√≥n", justify="center")
    table.add_column("Horarios", min_width=30)
    
    for movie in sorted(movies, key=lambda x: x.title):
        # Formatear horarios para mostrar
        showtimes_str = "\n".join(
            f"{st['date']} {st['time']} ({st['session']})" 
            for st in movie.showtimes
        )
        
        table.add_row(
            movie.title,
            movie.gender,
            f"{movie.duration} min",
            movie.rating,
            showtimes_str
        )
    
    console.print(table)
    console.print("\n[dim]Seleccione una pel√≠cula para ver m√°s detalles o comprar entradas[/dim]")